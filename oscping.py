'''
oscping.py - Utility written to ping active hosts on target network. This was part of my OSCP exam 
and labs to complete a Python script to automate discovery scans. This version is written in Python 
3.6 to force me to learn currently supported Python.

A script written to ping a subnet and then take all active IP addresses and output them into a file called
targets.txt. This file can then be feed into nmap for further discovery scanning. 

This script will be modified to support Class B & Class A networks over the coming weeks. I will 
also add in IPv6 discovery at some point is the near future.

Tim Wright 
OS-10753
08/2018

#ping that returns a value of 0 means a successful reply from target.
#ping that returns a value of 2 means no reply from target. 
#Otherwise ping failed!


'''

import argparse
import os
import subprocess
targets= []
file=open('targets.txt', mode='w')

#argument parser and syntex help
def arg_parser():
    parser=argparse.ArgumentParser()
    parser.add_argument('-a', '--address', required='True' ,help='oscping.py -a <Address Range> (IP address range to scan. Example "192.168.1.0/24"')
    args=parser.parse_args()
    return args

#Ping loop for Class C network
for ping in range (1,254):    
    address = vars(arg_parser())['address']
    address = address.strip('0/24') + str(ping)
    res = subprocess.call(['ping', '-n', '-i', '0.2', '-W', '1', '-c', '1', address])
    
    if res == 0:
        print ("ping to", address, "OK")
        print(address)
        targets.append(address)
        
        
    elif res == 2:
        print ("No response from", address)
    else:
        print ("Ping to", address, "failed!")

#print(targets)   added for debugging purposes during dev

#File creation loop
for i in range(0,len(targets)):
    print(targets[i])
    printedTargets=targets[i]+'\n'
    file.write(printedTargets)
    
file.close()
    


